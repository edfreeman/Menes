// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Menes.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OpenApiDocumentProvider")]
    [NUnit.Framework.CategoryAttribute("perScenarioContainer")]
    public partial class OpenApiDocumentProviderFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "perScenarioContainer"};
        
#line 1 "OpenApiDocumentProvider.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OpenApiDocumentProvider", "\tIn order to route requests to OpenApi operations\r\n\tAs a developer\r\n\tI want to lo" +
                    "ad my OpenApi definition and use it to match requests to operations", ProgrammingLanguage.CSharp, new string[] {
                        "perScenarioContainer"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an OpenApi document")]
        public virtual void LoadAnOpenApiDocument()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an OpenApi document", null, ((string[])(null)));
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("I load an OpenApi document from the embedded resource \'Menes.Specs.Data.PetStore." +
                        "yaml\' and call it \'PetStore\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("I add the OpenApi document called \'PetStore\' to the OpenApiDocumentProvider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("the OpenApiDocumentProvider contains 1 document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Match requests to operation path templates - success")]
        [NUnit.Framework.TestCaseAttribute("GET with path parameter", "https://petstore.swagger.io/v2/pet/65", "GET", "getPetById", null)]
        [NUnit.Framework.TestCaseAttribute("POST without path parameter", "https://petstore.swagger.io/v2/pet", "POST", "addPet", null)]
        [NUnit.Framework.TestCaseAttribute("PUT without path parameter", "https://petstore.swagger.io/v2/pet", "PUT", "updatePet", null)]
        [NUnit.Framework.TestCaseAttribute("POST with path parameter", "https://petstore.swagger.io/v2/pet/65", "POST", "updatePetWithForm", null)]
        [NUnit.Framework.TestCaseAttribute("DELETE with path parameter", "https://petstore.swagger.io/v2/pet/65", "DELETE", "deletePet", null)]
        [NUnit.Framework.TestCaseAttribute("GET with query parameter", "https://petstore.swagger.io/v2/pet/findByStatus", "GET", "findPetsByStatus", null)]
        [NUnit.Framework.TestCaseAttribute("GET with path parameter value that does not match schema", "https://petstore.swagger.io/v2/pet/fenton", "GET", "getPetById", null)]
        [NUnit.Framework.TestCaseAttribute("GET with path parameter second server", "https://petstore.swagger.io/v2/pet/65", "GET", "getPetById", null)]
        [NUnit.Framework.TestCaseAttribute("POST without path parameter second server", "https://petstore.swagger.io/v2/pet", "POST", "addPet", null)]
        [NUnit.Framework.TestCaseAttribute("PUT without path parameter second server", "https://petstore.swagger.io/v2/pet", "PUT", "updatePet", null)]
        [NUnit.Framework.TestCaseAttribute("POST with path parameter second server", "https://petstore.swagger.io/v2/pet/65", "POST", "updatePetWithForm", null)]
        [NUnit.Framework.TestCaseAttribute("DELETE with path parameter second server", "https://petstore.swagger.io/v2/pet/65", "DELETE", "deletePet", null)]
        [NUnit.Framework.TestCaseAttribute("GET with query parameter second server", "https://petstore.swagger.io/v2/pet/findByStatus", "GET", "findPetsByStatus", null)]
        [NUnit.Framework.TestCaseAttribute("GET with path parameter value that does not match schema second server", "https://petstore.swagger.io/v2/pet/fenton", "GET", "getPetById", null)]
        public virtual void MatchRequestsToOperationPathTemplates_Success(string description, string path, string method, string expectedOperationId, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Match requests to operation path templates - success", null, exampleTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
 testRunner.Given("I load an OpenApi document from the embedded resource \'Menes.Specs.Data.PetStore." +
                        "yaml\' and call it \'PetStore\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.And("I add the OpenApi document called \'PetStore\' to the OpenApiDocumentProvider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.When(string.Format("I get the operation path template for path \'{0}\' and method \'{1}\'", path, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then("an operation template is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And(string.Format("the operation template has operation Id \'{0}\'", expectedOperationId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Match requests to operation path templates - failure")]
        [NUnit.Framework.TestCaseAttribute("No matching path", "https://petstore.swagger.io/v2/dogs", "GET", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid method for the specified path", "https://petstore.swagger.io/v2/pet", "GET", null)]
        [NUnit.Framework.TestCaseAttribute("End of request path matches a specified path", "https://petstore.swagger.io/v2/this/is/unexpected/pet/findByStatus", "GET", null)]
        [NUnit.Framework.TestCaseAttribute("No matching path", "https://duff.server.io/v2/pet/65", "GET", null)]
        public virtual void MatchRequestsToOperationPathTemplates_Failure(string description, string path, string method, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Match requests to operation path templates - failure", null, exampleTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given("I load an OpenApi document from the embedded resource \'Menes.Specs.Data.PetStore." +
                        "yaml\' and call it \'PetStore\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.And("I add the OpenApi document called \'PetStore\' to the OpenApiDocumentProvider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.When(string.Format("I get the operation path template for path \'{0}\' and method \'{1}\'", path, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("no operation template is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
